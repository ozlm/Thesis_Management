//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace gantt_rest_net.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities7 : DbContext
    {
        public Entities7()
            : base("name=Entities7")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<announcement> announcement { get; set; }
        public virtual DbSet<groups> groups { get; set; }
        public virtual DbSet<groupTaskk> groupTaskk { get; set; }
        public virtual DbSet<Links> Links { get; set; }
        public virtual DbSet<projects> projects { get; set; }
        public virtual DbSet<report> report { get; set; }
        public virtual DbSet<student> student { get; set; }
        public virtual DbSet<supervisor> supervisor { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Tasks> Tasks { get; set; }
        public virtual DbSet<version> version { get; set; }
    
        public virtual int addGroup(Nullable<short> st1, Nullable<short> st2, Nullable<short> st3, Nullable<short> st4, Nullable<short> sup)
        {
            var st1Parameter = st1.HasValue ?
                new ObjectParameter("st1", st1) :
                new ObjectParameter("st1", typeof(short));
    
            var st2Parameter = st2.HasValue ?
                new ObjectParameter("st2", st2) :
                new ObjectParameter("st2", typeof(short));
    
            var st3Parameter = st3.HasValue ?
                new ObjectParameter("st3", st3) :
                new ObjectParameter("st3", typeof(short));
    
            var st4Parameter = st4.HasValue ?
                new ObjectParameter("st4", st4) :
                new ObjectParameter("st4", typeof(short));
    
            var supParameter = sup.HasValue ?
                new ObjectParameter("sup", sup) :
                new ObjectParameter("sup", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addGroup", st1Parameter, st2Parameter, st3Parameter, st4Parameter, supParameter);
        }
    
        public virtual int addGroupTask(Nullable<short> groupId, Nullable<int> taskId)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("groupId", groupId) :
                new ObjectParameter("groupId", typeof(short));
    
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("taskId", taskId) :
                new ObjectParameter("taskId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addGroupTask", groupIdParameter, taskIdParameter);
        }
    
        public virtual int addProject(string proName, Nullable<short> groupID)
        {
            var proNameParameter = proName != null ?
                new ObjectParameter("proName", proName) :
                new ObjectParameter("proName", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("groupID", groupID) :
                new ObjectParameter("groupID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addProject", proNameParameter, groupIDParameter);
        }
    
        public virtual int addStudent(string stuName, string stuSurname, string mail, string passwordd)
        {
            var stuNameParameter = stuName != null ?
                new ObjectParameter("stuName", stuName) :
                new ObjectParameter("stuName", typeof(string));
    
            var stuSurnameParameter = stuSurname != null ?
                new ObjectParameter("stuSurname", stuSurname) :
                new ObjectParameter("stuSurname", typeof(string));
    
            var mailParameter = mail != null ?
                new ObjectParameter("mail", mail) :
                new ObjectParameter("mail", typeof(string));
    
            var passworddParameter = passwordd != null ?
                new ObjectParameter("passwordd", passwordd) :
                new ObjectParameter("passwordd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addStudent", stuNameParameter, stuSurnameParameter, mailParameter, passworddParameter);
        }
    
        public virtual int addSupervisor(string mail, string passwordd, string supName, string supSurname, Nullable<bool> isAdmin)
        {
            var mailParameter = mail != null ?
                new ObjectParameter("mail", mail) :
                new ObjectParameter("mail", typeof(string));
    
            var passworddParameter = passwordd != null ?
                new ObjectParameter("passwordd", passwordd) :
                new ObjectParameter("passwordd", typeof(string));
    
            var supNameParameter = supName != null ?
                new ObjectParameter("supName", supName) :
                new ObjectParameter("supName", typeof(string));
    
            var supSurnameParameter = supSurname != null ?
                new ObjectParameter("supSurname", supSurname) :
                new ObjectParameter("supSurname", typeof(string));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("isAdmin", isAdmin) :
                new ObjectParameter("isAdmin", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addSupervisor", mailParameter, passworddParameter, supNameParameter, supSurnameParameter, isAdminParameter);
        }
    
        public virtual int deleteGroup(Nullable<short> groupID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("groupID", groupID) :
                new ObjectParameter("groupID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteGroup", groupIDParameter);
        }
    
        public virtual int deleteProject(Nullable<short> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteProject", projectIDParameter);
        }
    
        public virtual int deleteStudent(Nullable<short> student_id)
        {
            var student_idParameter = student_id.HasValue ?
                new ObjectParameter("student_id", student_id) :
                new ObjectParameter("student_id", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteStudent", student_idParameter);
        }
    
        public virtual int deleteSupervisor(Nullable<short> supID)
        {
            var supIDParameter = supID.HasValue ?
                new ObjectParameter("supID", supID) :
                new ObjectParameter("supID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteSupervisor", supIDParameter);
        }
    
        public virtual ObjectResult<deneme_Result> deneme()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<deneme_Result>("deneme");
        }
    
        public virtual ObjectResult<Nullable<short>> findID(Nullable<short> stuID)
        {
            var stuIDParameter = stuID.HasValue ?
                new ObjectParameter("stuID", stuID) :
                new ObjectParameter("stuID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("findID", stuIDParameter);
        }
    
        public virtual ObjectResult<listedProject_Result> listedProject()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<listedProject_Result>("listedProject");
        }
    
        public virtual ObjectResult<listReports_Result> listReports(Nullable<short> groupsID)
        {
            var groupsIDParameter = groupsID.HasValue ?
                new ObjectParameter("groupsID", groupsID) :
                new ObjectParameter("groupsID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<listReports_Result>("listReports", groupsIDParameter);
        }
    
        public virtual ObjectResult<newsup_Result> newsup(Nullable<short> supID)
        {
            var supIDParameter = supID.HasValue ?
                new ObjectParameter("supID", supID) :
                new ObjectParameter("supID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<newsup_Result>("newsup", supIDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int spFindName(string email, ObjectParameter student, ObjectParameter supervisor)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFindName", emailParameter, student, supervisor);
        }
    
        public virtual ObjectResult<Nullable<short>> spname(string mail)
        {
            var mailParameter = mail != null ?
                new ObjectParameter("mail", mail) :
                new ObjectParameter("mail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("spname", mailParameter);
        }
    
        public virtual ObjectResult<supdeneme_Result> supdeneme(Nullable<short> supID)
        {
            var supIDParameter = supID.HasValue ?
                new ObjectParameter("supID", supID) :
                new ObjectParameter("supID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<supdeneme_Result>("supdeneme", supIDParameter);
        }
    
        public virtual ObjectResult<supListProject_Result> supListProject(Nullable<short> supID)
        {
            var supIDParameter = supID.HasValue ?
                new ObjectParameter("supID", supID) :
                new ObjectParameter("supID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<supListProject_Result>("supListProject", supIDParameter);
        }
    
        public virtual int updateGroup(Nullable<short> st1, Nullable<short> st2, Nullable<short> st3, Nullable<short> st4, Nullable<short> supID, Nullable<short> groupID)
        {
            var st1Parameter = st1.HasValue ?
                new ObjectParameter("st1", st1) :
                new ObjectParameter("st1", typeof(short));
    
            var st2Parameter = st2.HasValue ?
                new ObjectParameter("st2", st2) :
                new ObjectParameter("st2", typeof(short));
    
            var st3Parameter = st3.HasValue ?
                new ObjectParameter("st3", st3) :
                new ObjectParameter("st3", typeof(short));
    
            var st4Parameter = st4.HasValue ?
                new ObjectParameter("st4", st4) :
                new ObjectParameter("st4", typeof(short));
    
            var supIDParameter = supID.HasValue ?
                new ObjectParameter("supID", supID) :
                new ObjectParameter("supID", typeof(short));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("groupID", groupID) :
                new ObjectParameter("groupID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateGroup", st1Parameter, st2Parameter, st3Parameter, st4Parameter, supIDParameter, groupIDParameter);
        }
    
        public virtual int updateProject(string pname, Nullable<short> groupID, Nullable<short> pID)
        {
            var pnameParameter = pname != null ?
                new ObjectParameter("pname", pname) :
                new ObjectParameter("pname", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("groupID", groupID) :
                new ObjectParameter("groupID", typeof(short));
    
            var pIDParameter = pID.HasValue ?
                new ObjectParameter("pID", pID) :
                new ObjectParameter("pID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateProject", pnameParameter, groupIDParameter, pIDParameter);
        }
    
        public virtual int updateStudent(string name, string surname, string email, string password, Nullable<short> studentID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("surname", surname) :
                new ObjectParameter("surname", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("studentID", studentID) :
                new ObjectParameter("studentID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateStudent", nameParameter, surnameParameter, emailParameter, passwordParameter, studentIDParameter);
        }
    
        public virtual int updateSupervisor(string email, string password, string name, string surname, Nullable<short> supID)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("surname", surname) :
                new ObjectParameter("surname", typeof(string));
    
            var supIDParameter = supID.HasValue ?
                new ObjectParameter("supID", supID) :
                new ObjectParameter("supID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateSupervisor", emailParameter, passwordParameter, nameParameter, surnameParameter, supIDParameter);
        }
    }
}
